Создать двух пользователей (с помощью метода User.objects.create_user('username')).

	python manage.py shell

from news.models import *
	dir()

	u1 = User.objects.create(username='User1')
	u2 = User.objects.create(username='User2')

Создать два объекта модели Author, связанные с пользователями.

	Author.objects.create(user=u1) 
	Author.objects.create(user=u2)

Добавить 4 категории в модель Category.

	Category.objects.create(nameCategory='Politics')
	Category.objects.create(nameCategory='Economy')
	Category.objects.create(nameCategory='Sport')
	Category.objects.create(nameCategory='Reklama')

Добавить 2 статьи и 1 новость.
	authorU1 = Author.objects.get(id=1)
	authorU2 = Author.objects.get(id=2)
	Post.objects.create(author=authorU1  , choiceType= 'AR', title='The article of the first author ', content='here is the first text of the first author about Economy and Politics')
	Post.objects.create(author=authorU2  , choiceType= 'AR', title='The article of the second author ', content='here is the first text of the second author about Sport')
	Post.objects.create(author=authorU2  , choiceType= 'NW', title='The news of the second author ', content='here is the first news of the second author about Sport')

	Post.objects.get(id=1).preview() 

Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

	Post.objects.get(id=1).categoryPost.add(Category.objects.get(id=1)) 
	Post.objects.get(id=1).categoryPost.add(Category.objects.get(id=2))
	Post.objects.get(id=2).categoryPost.add(Category.objects.get(id=3))

Создать как минимум 4 комментария к разным объектам модели Post 
(в каждом объекте должен быть как минимум один комментарий).

	Comment.objects.create(postCom=Post.objects.get(id=1), user=Author.objects.get(id=1).user, textCom='comment on the policy in the first article from author 1')
	Comment.objects.create(postCom=Post.objects.get(id=1), user=Author.objects.get(id=2).user, textCom='comment on the policy in the first article from author 2')
	Comment.objects.create(postCom=Post.objects.get(id=2), user=Author.objects.get(id=1).user, textCom='comment on the Sport in the second article from author 1')
	Comment.objects.create(postCom=Post.objects.get(id=2), user=Author.objects.get(id=2).user, textCom='comment on the Sport in the second article from author 2')



Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

	Post.objects.get(id=1).like()
	Post.objects.get(id=1).like()
	Post.objects.get(id=2).like()
	Post.objects.get(id=2).like()
	Post.objects.get(id=2).dislike()

	Comment.objects.get(id=1).like()
	Comment.objects.get(id=2).like()
	Comment.objects.get(id=2).dislike()

	Comment.objects.get(id=3).like()
	Comment.objects.get(id=3).dislike()

	Comment.objects.get(id=2).rating

Обновить рейтинги пользователей.

	a1 = Author.objects.get(id=1)
	a1.update_rating()
	a1.ratingAuthor
	a2 = Author.objects.get(id=2)
	a2.update_rating()
	a2.ratingAuthor

Вывести username и рейтинг лучшего пользователя

best_user = Author.objects.order_by('-ratingAuthor').first()
print(best_user.user.username, best_user.ratingAuthor)

ИЛИ

best_user = User.objects.order_by('-author__ratingAuthor').first()
username = best_user.username
rating = best_user.author.ratingAuthor
print(f"Лучший пользователь: {username}, рейтинг: {rating}")


Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

best_post = Post.objects.order_by('-rating').first()
date_added = best_post.timeCreate
username = best_post.author.user.username
rating = best_post.rating
title = best_post.title
preview = best_post.preview()
print(f"Дата добавления:{date_added} Автор:{username} Рейтинг:{rating} Заголовок: {title} Превью: {preview}")


Вывести все комментарии (дата, пользователь, рейтинг, текст) к лучшей статье.

best_post = Post.objects.order_by('-rating').first()
comments = Comment.objects.filter(postCom=best_post)

comments_data = []
for comment in comments:
      comment_data = {
	'Дата': comment.timeCom, 
	'Пользователь': comment.user.username,
	'Рейтинг': comment.rating, 
	'Текст': comment.textCom
       }
       comments_data.append(comment_data)
print(f"Комментарии:\n{comments_data}")



