Создать двух пользователей (с помощью метода User.objects.create_user('username')).

	python manage.py shell
from django.db import models
from django.contrib.auth.models import User
from django.db.models import Sum
from news.models import *
	dir()

	u1 = User.objects.create(username='User1')
	u2 = User.objects.create(username='User2')

Создать два объекта модели Author, связанные с пользователями.

	Author.objects.create(authorUser=u1) 
	Author.objects.create(authorUser=u2)

Добавить 4 категории в модель Category.

	Category.objects.create(nameCategory='Politics')
	Category.objects.create(nameCategory='Economy')
	Category.objects.create(nameCategory='Sport')
	Category.objects.create(nameCategory='Reklama')

Добавить 2 статьи и 1 новость.
	authorU1 = Author.objects.get(id=1)
	authorU2 = Author.objects.get(id=2)
	Post.objects.create(author=authorU1  , choiceType= 'AR', title='The article of the first author ', content='here is the first text of the first author about Economy and Politics')
	Post.objects.create(author=authorU2  , choiceType= 'AR', title='The article of the second author ', content='here is the first text of the second author about Sport')
	Post.objects.create(author=authorU2  , choiceType= 'NW', title='The news of the second author ', content='here is the first news of the second author about Sport')

	Post.objects.get(id=1).preview() 

Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

	Post.objects.get(id=1).categoryPost.add(Category.objects.get(id=1)) 
	Post.objects.get(id=1).categoryPost.add(Category.objects.get(id=2))
	Post.objects.get(id=2).categoryPost.add(Category.objects.get(id=3))

Создать как минимум 4 комментария к разным объектам модели Post 
(в каждом объекте должен быть как минимум один комментарий).

	Comment.objects.create(postCom=Post.objects.get(id=1), userC=Author.objects.get(id=1).authorUser, textCom='comment on the policy in the first article from author 1')
	Comment.objects.create(postCom=Post.objects.get(id=1), userC=Author.objects.get(id=2).authorUser, textCom='comment on the policy in the first article from author 2')
	Comment.objects.create(postCom=Post.objects.get(id=2), userC=Author.objects.get(id=1).authorUser, textCom='comment on the Sport in the second article from author 1')
	Comment.objects.create(postCom=Post.objects.get(id=2), userC=Author.objects.get(id=2).authorUser, textCom='comment on the Sport in the second article from author 2')



Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

	Post.objects.get(id=1).like()
	Post.objects.get(id=1).dislike()
	Post.objects.get(id=2).like()
	Post.objects.get(id=2).dislike()

	Comment.objects.get(id=1).like()
	Comment.objects.get(id=1).dislike()
	Comment.objects.get(id=2).like()
	Comment.objects.get(id=2).dislike()

	Comment.objects.get(id=3).like()
	Comment.objects.get(id=3).dislike()

	Comment.objects.get(id=2).ratingCom

Обновить рейтинги пользователей.

	a1 = Author.objects.get(id=1)
	a1.update_rating()
	

Вывести username и рейтинг лучшего пользователя

	a1.ratingAuthor
	a1.post_set.all().values('rating')
	a1.authorUser.comment_set.all().values('ratingAuthor')


	a2 = Author.objects.all().order_by('-ratingAuthor')[:1] 
	a2
	for b in a2:
		b.authorUser.username
		b.ratingAuthor




Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

a3 = Post.objects.all().order_by('-rating')[:1]
for j in a3:
	f"Data : {j.timeCreate.day}"
	f"Rating: {j.rating}"
	j.author.authorUser
	j.title
	j.preview()


Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

a4 = Comment.objects.all().filter(postCom=a3)

for d in a4:
	F"Data : {d.timeCom.day}/{d.timeCom.month}/{d.timeCom.year}"
	d.userC
	F"Rating : {d.rating}"
	d.text